# -*- coding: utf-8 -*-
"""2.3.Dijkstra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KOUM4BSTSGt8Tn6dzDEhLHntMWXLEu_i
"""

import heapq

def dijkstra(graph, start):
    """
    graph: dict[node] = list of (neighbor, weight)
    start: starting node
    Returns: dict of shortest distances from start to every other node
    """
    dist = {node: float('inf') for node in graph}
    dist[start] = 0
    visited = set()
    min_heap = [(0, start)]

    while min_heap:
        current_dist, current_node = heapq.heappop(min_heap)

        if current_node in visited:
            continue
        visited.add(current_node)

        for neighbor, weight in graph[current_node]:
            distance = current_dist + weight
            if distance < dist[neighbor]:
                dist[neighbor] = distance
                heapq.heappush(min_heap, (distance, neighbor))

    return dist

# Example usage:
graph = {
    'A': [('B', 4), ('C', 1)],
    'B': [('E', 4)],
    'C': [('B', 2), ('D', 4)],
    'D': [('E', 4)],
    'E': []
}

distances = dijkstra(graph, 'A')
print("Shortest distances from A:")
for node, d in distances.items():
    print(f"{node}: {d}")