# -*- coding: utf-8 -*-
"""2.1.BFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mF2tk8ivLD7Jqqa9F6TgvwKIHOwQ4ApQ
"""

from collections import deque
def BFS(graph,start_node,goal_node)
    if start_node not in graph:
      print("Start node is not present in the graph")
      return None
    if goal_node not in graph:
      print("Goal node is not present in the graph")
      return None
    visited=set()
    queue=deque([[start_node]])
    while queue:
      path=queue.popleft()
      node=path[-1]
      if node == goal_node:
        return path
      if path not in visited:
        visited.add(path)
        for neighbour in graph.get(node, [])
          new_path=list(path)
          new_path.append(neighbour)
          queue.append(new_path)
      return None

graph = {
    'A' : ['B','C'],
    'B' : ['D','E'],
    'C' : ['F'],
    'D' : [],
    'E' : ['F'],
    'F' : [];
}
start_node = 'A'
goal_node ='F'
result=BFS(graph,start_node,goal_node)
if result:
  print("Path Found :","->".join(result))
else:
  print("Path not found")

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load dataset (Iris)
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Train Random Forest
model = RandomForestClassifier(n_estimators=100)  # 100 trees
model.fit(X_train, y_train)

# Predict & evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))