# -*- coding: utf-8 -*-
"""2.4.Prims.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MToWJtShaCZw9pdjJzF0HcvjOZf69Mtd
"""

import heapq

def prim_mst(adj):
    """
    adj: dict[node] = list of (neighbor, weight)
    Returns: list of edges in the MST and the total cost.
    """
    start = next(iter(adj))           # pick an arbitrary start node
    visited = set([start])
    edges = []
    min_heap = []

    # Push all edges from the start node into the heap
    for v, w in adj[start]:
        heapq.heappush(min_heap, (w, start, v))

    mst_cost = 0
    mst_edges = []

    while min_heap and len(visited) < len(adj):
        weight, u, v = heapq.heappop(min_heap)
        if v in visited:
            continue
        # This edge is the smallest that grows the tree
        visited.add(v)
        mst_cost += weight
        mst_edges.append((u, v, weight))

        # Add all edges from the newly visited node
        for to, w2 in adj[v]:
            if to not in visited:
                heapq.heappush(min_heap, (w2, v, to))

    return mst_edges, mst_cost

# Example usage:
graph = {
    'A': [('B', 2), ('C', 3)],
    'B': [('A', 2), ('C', 1), ('D', 4)],
    'C': [('A', 3), ('B', 1), ('D', 5)],
    'D': [('B', 4), ('C', 5)]
}

mst, cost = prim_mst(graph)
print("MST edges:", mst)
print("Total cost:", cost)