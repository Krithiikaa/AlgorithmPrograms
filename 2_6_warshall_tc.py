# -*- coding: utf-8 -*-
"""2.6.Warshall Tc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DXrT7aYzS75XKIso2eWqf3pTL4fWqncj
"""

def warshall_tc(adj_matrix):
    """
    adj_matrix: 2D list (n x n) of 0/1, where 1 means an edge i->j exists.
    Returns: 2D list (n x n) of 0/1, where 1 means j is reachable from i.
    """
    n = len(adj_matrix)
    # copy to avoid mutating the input
    reach = [row[:] for row in adj_matrix]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                # if i can reach k and k can reach j, then i can reach j
                if reach[i][k] and reach[k][j]:
                    reach[i][j] = 1
    return reach

# Example usage:
adj = [
    [1, 1, 0, 0],  # node 0 -> itself and 1
    [0, 1, 1, 0],  # node 1 -> itself and 2
    [0, 0, 1, 1],  # node 2 -> itself and 3
    [0, 0, 0, 1]   # node 3 -> itself
]

tc = warshall_tc(adj)
for row in tc:
    print(row)