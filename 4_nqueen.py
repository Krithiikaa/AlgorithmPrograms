# -*- coding: utf-8 -*-
"""4.Nqueen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-uoooz37CnaOprq8U4xEdQ25uhHnf6c
"""

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    # Check column
    for i in range(row):
        if board[i][col]:
            return False
    # Check upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False
    # Check upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j]:
            return False
    return True

def solve_n_queens(board, row, n):
    if row == n:
        print_solution(board)
        return True  # To find one solution only
    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            res = solve_n_queens(board, row + 1, n) or res
            board[row][col] = 0
    return res

# Driver
n = 8
board = [[0 for _ in range(n)] for _ in range(n)]
solve_n_queens(board, 0, n)